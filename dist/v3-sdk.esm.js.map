{"version":3,"file":"v3-sdk.esm.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/constants.ts","../src/internalConstants.ts","../src/utils/computePoolAddress.ts","../src/utils/liquidityMath.ts","../src/utils/fullMath.ts","../src/utils/sqrtPriceMath.ts","../src/utils/swapMath.ts","../src/utils/mostSignificantBit.ts","../src/utils/tickMath.ts","../src/entities/tickDataProvider.ts","../src/entities/pool.ts","../src/utils/maxLiquidityForAmounts.ts","../src/utils/encodeSqrtRatioX32.ts","../src/utils/priceTickConversions.ts","../src/entities/position.ts","../src/entities/route.ts","../src/utils/calldata.ts","../src/utils/encodeRouteToPath.ts","../src/utils/isSorted.ts","../src/utils/nearestUsableTick.ts","../src/utils/tickList.ts","../src/utils/seeds.ts","../src/entities/tick.ts","../src/entities/trade.ts","../src/entities/bitmap.ts","../src/multicall.ts","../src/selfPermit.ts","../src/payments.ts","../src/nonfungiblePositionManager.ts","../src/quoter.ts","../src/staker.ts","../src/swapRouter.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","export const FACTORY_ADDRESS = '0x1F98431c8aD98523631AE4a59f267346ea31F984'\n\nexport const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000'\n\nexport const POOL_INIT_CODE_HASH = '0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54'\n\n/**\n * The default factory enabled fee amounts, denominated in hundredths of bips.\n */\nexport enum FeeAmount {\n  LOWEST = 100,\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000\n}\n\n/**\n * The default factory tick spacings by fee amount.\n */\nexport const TICK_SPACINGS: { [amount in FeeAmount]: number } = {\n  [FeeAmount.LOWEST]: 1,\n  [FeeAmount.LOW]: 10,\n  [FeeAmount.MEDIUM]: 60,\n  [FeeAmount.HIGH]: 200\n}\n","import JSBI from 'jsbi'\n\n// constants used internally but not expected to be used externally\nexport const NEGATIVE_ONE = JSBI.BigInt(-1)\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// used in liquidity amount math\nexport const Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32))\nexport const Q64 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(64))\nexport const Q128 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128))\n\nexport const MaxUint32 = JSBI.subtract(Q32, ONE)\nexport const MaxUint64 = JSBI.subtract(Q64, ONE)\n\nexport const U32Resolution = JSBI.BigInt(32)\n","// import { defaultAbiCoder } from '@ethersproject/abi'\n// import { getCreate2Address } from '@ethersproject/address'\n// import { keccak256 } from '@ethersproject/solidity'\nimport { Token } from '@uniswap/sdk-core'\nimport * as anchor from '@project-serum/anchor'\nimport { FeeAmount } from '../constants'\n\nconst { PublicKey, Keypair, SystemProgram } = anchor.web3\nconst POOL_SEED = Buffer.from('p')\n\nexport function u16ToSeed(num: number) {\n  const arr = new ArrayBuffer(2)\n  const view = new DataView(arr)\n  view.setUint16(0, num, false)\n  return new Uint8Array(arr)\n}\n\nexport function i16ToSeed(num: number) {\n  const arr = new ArrayBuffer(2)\n  const view = new DataView(arr)\n  view.setInt16(0, num, false)\n  return new Uint8Array(arr)\n}\n\n// Export to commons later?\n// Generate seed buffer from a u32 number\nexport function u32ToSeed(num: number) {\n  const arr = new ArrayBuffer(4)\n  const view = new DataView(arr)\n  view.setUint32(0, num, false)\n  return new Uint8Array(arr)\n}\n\nexport function i32ToSeed(num: number) {\n  const arr = new ArrayBuffer(4)\n  const view = new DataView(arr)\n  view.setInt32(0, num, false)\n  return new Uint8Array(arr)\n}\n\nexport const LOCAL_PROGRAM_ID = '9qe9svzmigVAvWh2qX9AJq3p4N9QbTyx2yRCfN1aAZam'\n\n/**\n * Computes a pool address\n * @param factoryAddress The Uniswap V3 factory address\n * @param tokenA The first token of the pair, irrespective of sort order\n * @param tokenB The second token of the pair, irrespective of sort order\n * @param fee The fee tier of the pool\n * @param initCodeHashManualOverride Override the init code hash used to compute the pool address if necessary\n * @returns The pool address\n */\nexport function computePoolAddress({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  initCodeHashManualOverride\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: FeeAmount\n  initCodeHashManualOverride?: string\n}): Promise<string> {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n  const tk0 = new PublicKey(token0.address)\n  const tk1 = new PublicKey(token1.address)\n\n  const pda = PublicKey.findProgramAddress(\n    [POOL_SEED, tk0.toBuffer(), tk1.toBuffer(), u32ToSeed(fee)],\n    new PublicKey(LOCAL_PROGRAM_ID)\n  ).then(([poolState, poolStateBump]) => {\n    return poolState.toString()\n  })\n  return pda\n\n  // return getCreate2Address(\n  //   factoryAddress,\n  //   keccak256(\n  //     ['bytes'],\n  //     [defaultAbiCoder.encode(['address', 'address', 'uint24'], [token0.address, token1.address, fee])]\n  //   ),\n  //   initCodeHashManualOverride ?? POOL_INIT_CODE_HASH\n  // )\n\n  /// Should return the hash of 'Factory + (Fee + token0 + token1) + Defaulthash\n  // return poolState.toString()\n  // return 'asdfasdfasdf'\n}\n","import JSBI from 'jsbi'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\n\nexport abstract class LiquidityMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static addDelta(x: JSBI, y: JSBI): JSBI {\n    if (JSBI.lessThan(y, ZERO)) {\n      return JSBI.subtract(x, JSBI.multiply(y, NEGATIVE_ONE))\n    } else {\n      return JSBI.add(x, y)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { ONE, ZERO } from '../internalConstants'\n\nexport abstract class FullMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\n    const product = JSBI.multiply(a, b)\n    let result = JSBI.divide(product, denominator)\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO)) result = JSBI.add(result, ONE)\n    return result\n  }\n}\n","import { MaxUint128 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO, Q32, MaxUint32, U32Resolution } from '../internalConstants'\nimport { FullMath } from './fullMath'\n\nfunction multiplyIn128(x: JSBI, y: JSBI): JSBI {\n  const product = JSBI.multiply(x, y)\n  return JSBI.bitwiseAnd(product, MaxUint128)\n}\n\nfunction addIn128(x: JSBI, y: JSBI): JSBI {\n  const sum = JSBI.add(x, y)\n  return JSBI.bitwiseAnd(sum, MaxUint128)\n}\n\nexport abstract class SqrtPriceMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getAmount0Delta(sqrtRatioAX32: JSBI, sqrtRatioBX32: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX32, sqrtRatioBX32)) {\n      ;[sqrtRatioAX32, sqrtRatioBX32] = [sqrtRatioBX32, sqrtRatioAX32]\n    }\n\n    const numerator1 = JSBI.leftShift(liquidity, U32Resolution)\n    const numerator2 = JSBI.subtract(sqrtRatioBX32, sqrtRatioAX32)\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX32), ONE, sqrtRatioAX32)\n      : JSBI.divide(JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX32), sqrtRatioAX32)\n  }\n\n  public static getAmount1Delta(sqrtRatioAX32: JSBI, sqrtRatioBX32: JSBI, liquidity: JSBI, roundUp: boolean): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX32, sqrtRatioBX32)) {\n      ;[sqrtRatioAX32, sqrtRatioBX32] = [sqrtRatioBX32, sqrtRatioAX32]\n    }\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(liquidity, JSBI.subtract(sqrtRatioBX32, sqrtRatioAX32), Q32)\n      : JSBI.divide(JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX32, sqrtRatioAX32)), Q32)\n  }\n\n  public static getNextSqrtPriceFromInput(sqrtPX32: JSBI, liquidity: JSBI, amountIn: JSBI, zeroForOne: boolean): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX32, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX32, liquidity, amountIn, true)\n      : this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX32, liquidity, amountIn, true)\n  }\n\n  public static getNextSqrtPriceFromOutput(\n    sqrtPX32: JSBI,\n    liquidity: JSBI,\n    amountOut: JSBI,\n    zeroForOne: boolean\n  ): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX32, ZERO))\n    invariant(JSBI.greaterThan(liquidity, ZERO))\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount1RoundingDown(sqrtPX32, liquidity, amountOut, false)\n      : this.getNextSqrtPriceFromAmount0RoundingUp(sqrtPX32, liquidity, amountOut, false)\n  }\n\n  private static getNextSqrtPriceFromAmount0RoundingUp(\n    sqrtPX32: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (JSBI.equal(amount, ZERO)) return sqrtPX32\n    const numerator1 = JSBI.leftShift(liquidity, U32Resolution)\n\n    if (add) {\n      let product = multiplyIn128(amount, sqrtPX32)\n      if (JSBI.equal(JSBI.divide(product, amount), sqrtPX32)) {\n        const denominator = addIn128(numerator1, product)\n        if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\n          return FullMath.mulDivRoundingUp(numerator1, sqrtPX32, denominator)\n        }\n      }\n\n      return FullMath.mulDivRoundingUp(numerator1, ONE, JSBI.add(JSBI.divide(numerator1, sqrtPX32), amount))\n    } else {\n      let product = multiplyIn128(amount, sqrtPX32)\n\n      invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX32))\n      invariant(JSBI.greaterThan(numerator1, product))\n      const denominator = JSBI.subtract(numerator1, product)\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX32, denominator)\n    }\n  }\n\n  private static getNextSqrtPriceFromAmount1RoundingDown(\n    sqrtPX32: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean\n  ): JSBI {\n    if (add) {\n      const quotient = JSBI.lessThanOrEqual(amount, MaxUint32)\n        ? JSBI.divide(JSBI.leftShift(amount, U32Resolution), liquidity)\n        : JSBI.divide(JSBI.multiply(amount, Q32), liquidity)\n\n      return JSBI.add(sqrtPX32, quotient)\n    } else {\n      const quotient = FullMath.mulDivRoundingUp(amount, Q32, liquidity)\n\n      invariant(JSBI.greaterThan(sqrtPX32, quotient))\n      return JSBI.subtract(sqrtPX32, quotient)\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { FeeAmount } from '../constants'\nimport { NEGATIVE_ONE, ZERO } from '../internalConstants'\nimport { FullMath } from './fullMath'\nimport { SqrtPriceMath } from './sqrtPriceMath'\n\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6))\n\nexport abstract class SwapMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static computeSwapStep(\n    sqrtRatioCurrentX32: JSBI,\n    sqrtRatioTargetX32: JSBI,\n    liquidity: JSBI,\n    amountRemaining: JSBI,\n    feePips: FeeAmount\n  ): [JSBI, JSBI, JSBI, JSBI] {\n    const returnValues: Partial<{\n      sqrtRatioNextX32: JSBI\n      amountIn: JSBI\n      amountOut: JSBI\n      feeAmount: JSBI\n    }> = {}\n\n    const zeroForOne = JSBI.greaterThanOrEqual(sqrtRatioCurrentX32, sqrtRatioTargetX32)\n    const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO)\n\n    if (exactIn) {\n      const amountRemainingLessFee = JSBI.divide(\n        JSBI.multiply(amountRemaining, JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))),\n        MAX_FEE\n      )\n      returnValues.amountIn = zeroForOne\n        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX32, sqrtRatioCurrentX32, liquidity, true)\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX32, sqrtRatioTargetX32, liquidity, true)\n      if (JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn!)) {\n        returnValues.sqrtRatioNextX32 = sqrtRatioTargetX32\n      } else {\n        returnValues.sqrtRatioNextX32 = SqrtPriceMath.getNextSqrtPriceFromInput(\n          sqrtRatioCurrentX32,\n          liquidity,\n          amountRemainingLessFee,\n          zeroForOne\n        )\n      }\n    } else {\n      returnValues.amountOut = zeroForOne\n        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX32, sqrtRatioCurrentX32, liquidity, false)\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX32, sqrtRatioTargetX32, liquidity, false)\n      if (JSBI.greaterThanOrEqual(JSBI.multiply(amountRemaining, NEGATIVE_ONE), returnValues.amountOut)) {\n        returnValues.sqrtRatioNextX32 = sqrtRatioTargetX32\n      } else {\n        returnValues.sqrtRatioNextX32 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n          sqrtRatioCurrentX32,\n          liquidity,\n          JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n          zeroForOne\n        )\n      }\n    }\n\n    const max = JSBI.equal(sqrtRatioTargetX32, returnValues.sqrtRatioNextX32)\n\n    if (zeroForOne) {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount0Delta(returnValues.sqrtRatioNextX32, sqrtRatioCurrentX32, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount1Delta(returnValues.sqrtRatioNextX32, sqrtRatioCurrentX32, liquidity, false)\n    } else {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX32, returnValues.sqrtRatioNextX32, liquidity, true)\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX32, returnValues.sqrtRatioNextX32, liquidity, false)\n    }\n\n    if (!exactIn && JSBI.greaterThan(returnValues.amountOut!, JSBI.multiply(amountRemaining, NEGATIVE_ONE))) {\n      returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE)\n    }\n\n    if (exactIn && JSBI.notEqual(returnValues.sqrtRatioNextX32, sqrtRatioTargetX32)) {\n      // we didn't reach the target, so take the remainder of the maximum input as fee\n      returnValues.feeAmount = JSBI.subtract(amountRemaining, returnValues.amountIn!)\n    } else {\n      returnValues.feeAmount = FullMath.mulDivRoundingUp(\n        returnValues.amountIn!,\n        JSBI.BigInt(feePips),\n        JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips))\n      )\n    }\n\n    return [returnValues.sqrtRatioNextX32!, returnValues.amountIn!, returnValues.amountOut!, returnValues.feeAmount!]\n  }\n}\n","import { MaxUint128 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\n\nconst TWO = JSBI.BigInt(2)\nconst POWERS_OF_2 = [32, 16, 8, 4, 2, 1].map((pow: number): [number, JSBI] => [\n  pow,\n  JSBI.exponentiate(TWO, JSBI.BigInt(pow))\n])\n\nexport function mostSignificantBit(x: JSBI): number {\n  invariant(JSBI.greaterThan(x, ZERO), 'ZERO')\n  invariant(JSBI.lessThanOrEqual(x, MaxUint128), 'MAX')\n\n  let msb: number = 0\n  for (const [power, min] of POWERS_OF_2) {\n    if (JSBI.greaterThanOrEqual(x, min)) {\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power))\n      msb += power\n    }\n  }\n  return msb\n}\n","import { MaxUint128 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { mostSignificantBit } from './mostSignificantBit'\n\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\n  return JSBI.signedRightShift(JSBI.multiply(val, JSBI.BigInt(mulBy)), JSBI.BigInt(64))\n}\n\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32))\n\nexport abstract class TickMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * The minimum tick that can be used on any pool.\n   */\n  public static MIN_TICK: number = -221818\n  /**\n   * The maximum tick that can be used on any pool.\n   */\n  public static MAX_TICK: number = -TickMath.MIN_TICK\n\n  /**\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\n   */\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt('65537')\n  /**\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\n   */\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt('281472331703918')\n\n  /**\n   * Returns the sqrt ratio as a Q32.32 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\n   * @param tick the tick for which to compute the sqrt ratio\n   */\n  public static getSqrtRatioAtTick(tick: number): JSBI {\n    invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK && Number.isInteger(tick), 'TICK')\n    const absTick: number = tick < 0 ? tick * -1 : tick\n\n    let ratio: JSBI = (absTick & 0x1) != 0 ? JSBI.BigInt('0xfffcb933bd6fb800') : JSBI.BigInt('0x10000000000000000')\n    if ((absTick & 0x2) != 0) ratio = mulShift(ratio, '0xfff97272373d4000')\n    if ((absTick & 0x4) != 0) ratio = mulShift(ratio, '0xfff2e50f5f657000')\n    if ((absTick & 0x8) != 0) ratio = mulShift(ratio, '0xffe5caca7e10f000')\n    if ((absTick & 0x10) != 0) ratio = mulShift(ratio, '0xffcb9843d60f7000')\n    if ((absTick & 0x20) != 0) ratio = mulShift(ratio, '0xff973b41fa98e800')\n    if ((absTick & 0x40) != 0) ratio = mulShift(ratio, '0xff2ea16466c9b000')\n    if ((absTick & 0x80) != 0) ratio = mulShift(ratio, '0xfe5dee046a9a3800')\n    if ((absTick & 0x100) != 0) ratio = mulShift(ratio, '0xfcbe86c7900bb000')\n    if ((absTick & 0x200) != 0) ratio = mulShift(ratio, '0xf987a7253ac65800')\n    if ((absTick & 0x400) != 0) ratio = mulShift(ratio, '0xf3392b0822bb6000')\n    if ((absTick & 0x800) != 0) ratio = mulShift(ratio, '0xe7159475a2caf000')\n    if ((absTick & 0x1000) != 0) ratio = mulShift(ratio, '0xd097f3bdfd2f2000')\n    if ((absTick & 0x2000) != 0) ratio = mulShift(ratio, '0xa9f746462d9f8000')\n    if ((absTick & 0x4000) != 0) ratio = mulShift(ratio, '0x70d869a156f31c00')\n    if ((absTick & 0x8000) != 0) ratio = mulShift(ratio, '0x31be135f97ed3200')\n    if ((absTick & 0x10000) != 0) ratio = mulShift(ratio, '0x9aa508b5b85a500')\n    if ((absTick & 0x20000) != 0) ratio = mulShift(ratio, '0x5d6af8dedc582c')\n\n    if (tick > 0) ratio = JSBI.divide(MaxUint128, ratio)\n\n    // back to Q32\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\n      : JSBI.divide(ratio, Q32)\n  }\n\n  /**\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX32\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX32\n   * @param sqrtRatioX32 the sqrt ratio as a Q32.32 for which to compute the tick\n   */\n  public static getTickAtSqrtRatio(sqrtRatioX32: JSBI): number {\n    invariant(\n      JSBI.greaterThanOrEqual(sqrtRatioX32, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX32, TickMath.MAX_SQRT_RATIO),\n      'SQRT_RATIO'\n    )\n\n    // we are not shifting in CYS\n    // const sqrtRatioX64 = JSBI.leftShift(sqrtRatioX32, JSBI.BigInt(32))\n    const sqrtRatioX64 = sqrtRatioX32\n\n    const msb = mostSignificantBit(sqrtRatioX64)\n\n    let r: JSBI\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(32))) {\n      r = JSBI.signedRightShift(sqrtRatioX64, JSBI.BigInt(msb - 31))\n    } else {\n      r = JSBI.leftShift(sqrtRatioX64, JSBI.BigInt(31 - msb))\n    }\n\n    // 128,64 changed to 32,16\n    let log_2: JSBI = JSBI.leftShift(JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(32)), JSBI.BigInt(16))\n\n    for (let i = 0; i < 14; i++) {\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(31))\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(32))\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(15 - i)))\n      r = JSBI.signedRightShift(r, f)\n    }\n\n    const log_sqrt10001 = JSBI.multiply(log_2, JSBI.BigInt('908567298'))\n\n    const tickLow = JSBI.toNumber(\n      JSBI.signedRightShift(JSBI.subtract(log_sqrt10001, JSBI.BigInt('42949672')), JSBI.BigInt(32))\n    )\n    const tickHigh = JSBI.toNumber(\n      JSBI.signedRightShift(JSBI.add(log_sqrt10001, JSBI.BigInt('3677218864')), JSBI.BigInt(32))\n    )\n\n    return tickLow === tickHigh\n      ? tickLow\n      : JSBI.lessThanOrEqual(TickMath.getSqrtRatioAtTick(tickHigh), sqrtRatioX32)\n      ? tickHigh\n      : tickLow\n  }\n}\n","import { BigintIsh } from '@uniswap/sdk-core'\nimport * as anchor from  '@project-serum/anchor'\nimport { PublicKey } from '@solana/web3.js'\nimport { u16ToSeed, u32ToSeed } from '../utils/computePoolAddress'\nimport { BITMAP_SEED, TICK_SEED } from '../utils/seeds'\nimport { tickPosition } from '.'\nimport { generateBitmapWord, nextInitializedBit } from './bitmap'\n// import { CyclosCore } from '../anchor/types/cyclos_core'\n// import { CyclosCore } from '../anchor/idl/cyclos_core.json'\n/**\n * Provides information about ticks\n */\nexport interface TickDataProvider {\n  /**\n   * Return information corresponding to a specific tick\n   * @param tick the tick to load\n   */\n  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>\n\n  /**\n   * Return the PDA corresponding to a specific tick\n   * @param tick get PDA for this tick\n   */\n  getTickAddress(tick: number): Promise<anchor.web3.PublicKey>\n\n  /**\n   * Return the next tick that is initialized within a single word\n   * @param tick The current tick\n   * @param lte Whether the next tick should be lte the current tick\n   * @param tickSpacing The tick spacing of the pool\n   */\n  nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number)\n    : Promise<[number, boolean, number, number, PublicKey]>\n}\n\n/**\n * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you\n * do not need to load tick data for your use case.\n */\nexport class NoTickDataProvider implements TickDataProvider {\n  getTickAddress(tick: number): Promise<anchor.web3.PublicKey> {\n    throw new Error('Method not implemented.')\n  }\n  private static ERROR_MESSAGE = 'No tick data provider was given'\n  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n\n  async nextInitializedTickWithinOneWord(\n    _tick: number,\n    _lte: boolean,\n    _tickSpacing: number\n  ): Promise<[number, boolean, number, number, PublicKey]> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE)\n  }\n}\n\nexport type PoolVars = {\n  token0: PublicKey,\n  token1: PublicKey,\n  fee: number,\n}\n// export class SolanaTickDataProvider implements TickDataProvider {\n//   program: anchor.Program<CyclosCore>\n//   pool: PoolVars\n\n//   constructor(program: anchor.Program<CyclosCore>, pool: PoolVars) {\n//     this.program = program\n//     this.pool = pool\n//   }\n\n//   async getTick(tick: number): Promise<{ liquidityNet: BigintIsh; }> {\n//     const tickState = (await PublicKey.findProgramAddress([\n//       TICK_SEED,\n//       this.pool.token0.toBuffer(),\n//       this.pool.token1.toBuffer(),\n//       u32ToSeed(this.pool.fee),\n//       u32ToSeed(tick)\n//     ],\n//       this.program.programId\n//     ))[0]\n\n//     const { liquidityNet } = await this.program.account.tickState.fetch(tickState)\n//     return {\n//       liquidityNet: liquidityNet.toString(),\n//     }\n//   }\n\n//   async getTickAddress(tick: number): Promise<anchor.web3.PublicKey> {\n//     return (await PublicKey.findProgramAddress([\n//       TICK_SEED,\n//       this.pool.token0.toBuffer(),\n//       this.pool.token1.toBuffer(),\n//       u32ToSeed(this.pool.fee),\n//       u32ToSeed(tick)\n//     ], this.program.programId))[0]\n//   }\n\n//   async nextInitializedTickWithinOneWord(tick: number, lte: boolean, tickSpacing: number)\n//     : Promise<[number, boolean, number, number, PublicKey]> {\n//     // TODO optimize function. Currently bitmaps are repeatedly fetched, even if two ticks are on the same bitmap\n//     let compressed = Math.floor(tick / tickSpacing)\n//     if (!lte) {\n//       compressed += 1\n//     }\n\n//     const { wordPos, bitPos } = tickPosition(compressed)\n\n//     const bitmapState = (await PublicKey.findProgramAddress([\n//       BITMAP_SEED,\n//       this.pool.token0.toBuffer(),\n//       this.pool.token1.toBuffer(),\n//       u32ToSeed(this.pool.fee),\n//       u16ToSeed(wordPos),\n//     ], this.program.programId))[0]\n\n//     let nextBit = lte ? 0 : 255\n//     let initialized = false\n//     try {\n//       const { word: wordArray } = await this.program.account.tickBitmapState.fetch(bitmapState)\n//       const word = generateBitmapWord(wordArray)\n//       const nextInitBit = nextInitializedBit(word, bitPos, lte)\n//       nextBit = nextInitBit.next\n//       initialized = nextInitBit.initialized\n//     } catch(error) {\n//       console.log('bitmap account doesnt exist, using defaults')\n//     }\n//     const nextTick = (wordPos * 256 + nextBit) * tickSpacing\n//     return [nextTick, initialized, wordPos, bitPos, bitmapState]\n//   }\n// }\n","import { BigintIsh, Price, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport { web3 } from '@project-serum/anchor'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { FACTORY_ADDRESS, FeeAmount, TICK_SPACINGS } from '../constants'\nimport { NEGATIVE_ONE, ONE, Q64, ZERO } from '../internalConstants'\nimport { computePoolAddress } from '../utils/computePoolAddress'\nimport { LiquidityMath } from '../utils/liquidityMath'\nimport { SwapMath } from '../utils/swapMath'\nimport { TickMath } from '../utils/tickMath'\nimport { Tick, TickConstructorArgs } from './tick'\nimport { NoTickDataProvider, TickDataProvider } from './tickDataProvider'\nimport { tickPosition } from '.'\nimport { TICK_SEED } from '../utils/seeds'\n\ninterface StepComputations {\n  sqrtPriceStartX32: JSBI\n  tickNext: number\n  initialized: boolean\n  sqrtPriceNextX32: JSBI\n  amountIn: JSBI\n  amountOut: JSBI\n  feeAmount: JSBI\n}\n\ninterface SwapAccount {\n  pubkey: web3.PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n}\n\n/**\n * By default, pools will not allow operations that require ticks.\n */\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider()\n\n/**\n * Represents a V3 pool\n */\nexport class Pool {\n  public readonly token0: Token\n  public readonly token1: Token\n  public readonly fee: FeeAmount\n  public readonly sqrtRatioX32: JSBI\n  public readonly liquidity: JSBI\n  public readonly tickCurrent: number\n  public readonly tickDataProvider: TickDataProvider\n\n  private _token0Price?: Price<Token, Token>\n  private _token1Price?: Price<Token, Token>\n\n  public static getAddress(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    initCodeHashManualOverride?: string\n  ): Promise<string> {\n    return computePoolAddress({ factoryAddress: FACTORY_ADDRESS, fee, tokenA, tokenB, initCodeHashManualOverride })\n  }\n\n  /**\n   * Construct a pool\n   * @param tokenA One of the tokens in the pool\n   * @param tokenB The other token in the pool\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param sqrtRatioX32 The sqrt of the current ratio of amounts of token1 to token0\n   * @param liquidity The current value of in range liquidity\n   * @param tickCurrent The current tick of the pool\n   * @param tickDataProvider The current state of the pool ticks or a data provider that can return tick data\n   */\n  public constructor(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtRatioX32: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    tickDataProvider: TickDataProvider = NO_TICK_DATA_PROVIDER_DEFAULT\n  ) {\n    // console.log('tick current in pool constructor', tickCurrent)\n    invariant(Number.isInteger(fee) && fee < 1_000_000, 'FEE')\n\n    const tickCurrentSqrtRatioX32 = TickMath.getSqrtRatioAtTick(tickCurrent)\n    const nextTickSqrtRatioX32 = TickMath.getSqrtRatioAtTick(tickCurrent + 1)\n    invariant(\n      JSBI.greaterThanOrEqual(JSBI.BigInt(sqrtRatioX32), tickCurrentSqrtRatioX32) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX32), nextTickSqrtRatioX32),\n      'PRICE_BOUNDS'\n    )\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    ;[this.token0, this.token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n    this.fee = fee\n    this.sqrtRatioX32 = JSBI.BigInt(sqrtRatioX32)\n    this.liquidity = JSBI.BigInt(liquidity)\n    this.tickCurrent = tickCurrent\n    this.tickDataProvider = tickDataProvider\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token The token to check\n   * @returns True if token is either token0 or token\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\n   */\n  public get token0Price(): Price<Token, Token> {\n    return (\n      this._token0Price ??\n      (this._token0Price = new Price(\n        this.token0,\n        this.token1,\n        Q64,\n        JSBI.multiply(this.sqrtRatioX32, this.sqrtRatioX32)\n      ))\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\n   */\n  public get token1Price(): Price<Token, Token> {\n    return (\n      this._token1Price ??\n      (this._token1Price = new Price(\n        this.token1,\n        this.token0,\n        JSBI.multiply(this.sqrtRatioX32, this.sqrtRatioX32),\n        Q64\n      ))\n    )\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pool.\n   * @param token The token to return price of\n   * @returns The price of the given token, in terms of the other.\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pool.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  /**\n   * Given an input amount of a token, return the computed output amount, and a pool with state updated after the trade\n   * @param inputAmount The input amount for which to quote the output amount\n   * @param sqrtPriceLimitX32 The Q32.32 sqrt price limit\n   * @returns The output amount and the pool with updated state\n   */\n  public async getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX32?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool, SwapAccount[]]> {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n\n    const zeroForOne = inputAmount.currency.equals(this.token0)\n\n    const { amountCalculated: outputAmount, sqrtRatioX32, liquidity, tickCurrent, accounts } = await this.swap(\n      zeroForOne,\n      inputAmount.quotient,\n      sqrtPriceLimitX32\n    )\n    // console.log('got tick from swap', tickCurrent)\n    const outputToken = zeroForOne ? this.token1 : this.token0\n    return [\n      CurrencyAmount.fromRawAmount(outputToken, JSBI.multiply(outputAmount, NEGATIVE_ONE)),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX32, liquidity, tickCurrent, this.tickDataProvider),\n      accounts,\n    ]\n  }\n\n  /**\n   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade\n   * @param outputAmount the output amount for which to quote the input amount\n   * @param sqrtPriceLimitX32 The Q32.32 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns The input amount and the pool with updated state\n   */\n  public async getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(outputAmount.currency.isToken && this.involvesToken(outputAmount.currency), 'TOKEN')\n\n    const zeroForOne = outputAmount.currency.equals(this.token1)\n\n    const { amountCalculated: inputAmount, sqrtRatioX32, liquidity, tickCurrent } = await this.swap(\n      zeroForOne,\n      JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE),\n      sqrtPriceLimitX96\n    )\n    const inputToken = zeroForOne ? this.token0 : this.token1\n    return [\n      CurrencyAmount.fromRawAmount(inputToken, inputAmount),\n      new Pool(this.token0, this.token1, this.fee, sqrtRatioX32, liquidity, tickCurrent, this.tickDataProvider)\n    ]\n  }\n\n  /**\n   * Executes a swap\n   * @param zeroForOne Whether the amount in is token0 or token1\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n   * @param sqrtPriceLimitX32 The Q32.32 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns amountCalculated\n   * @returns sqrtRatioX32\n   * @returns liquidity\n   * @returns tickCurrent\n   */\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX32?: JSBI\n  ): Promise<{ amountCalculated: JSBI; sqrtRatioX32: JSBI; liquidity: JSBI; tickCurrent: number, accounts: SwapAccount[] }> {\n    if (!sqrtPriceLimitX32)\n      sqrtPriceLimitX32 = zeroForOne\n        ? JSBI.add(TickMath.MIN_SQRT_RATIO, ONE)\n        : JSBI.subtract(TickMath.MAX_SQRT_RATIO, ONE)\n\n    if (zeroForOne) {\n      invariant(JSBI.greaterThan(sqrtPriceLimitX32, TickMath.MIN_SQRT_RATIO), 'RATIO_MIN')\n      invariant(JSBI.lessThan(sqrtPriceLimitX32, this.sqrtRatioX32), 'RATIO_CURRENT')\n    } else {\n      invariant(JSBI.lessThan(sqrtPriceLimitX32, TickMath.MAX_SQRT_RATIO), 'RATIO_MAX')\n      invariant(JSBI.greaterThan(sqrtPriceLimitX32, this.sqrtRatioX32), 'RATIO_CURRENT')\n    }\n\n    const exactInput = JSBI.greaterThanOrEqual(amountSpecified, ZERO)\n    console.log('exact input', exactInput)\n    // keep track of swap state\n\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX32: this.sqrtRatioX32,\n      tick: this.tickCurrent,\n      accounts: [] as SwapAccount[], // bitmap and tick accounts which must be traversed\n      liquidity: this.liquidity\n    }\n\n    let lastSavedWordPos: number | undefined\n\n    // start swap while loop\n    while (JSBI.notEqual(state.amountSpecifiedRemaining, ZERO) && state.sqrtPriceX32 != sqrtPriceLimitX32 && state.tick < TickMath.MAX_TICK && state.tick > TickMath.MIN_TICK) {\n      let step: Partial<StepComputations> = {}\n      step.sqrtPriceStartX32 = state.sqrtPriceX32\n\n      // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)\n      // by simply traversing to the next available tick, we instead need to exactly replicate\n      // tickBitmap.nextInitializedTickWithinOneWord\n      \n      // save the bitmap, and the tick account if it is initialized\n      const nextInitTick = await this.tickDataProvider.nextInitializedTickWithinOneWord(\n        state.tick,\n        zeroForOne,\n        this.tickSpacing\n      )\n      step.tickNext = nextInitTick[0]\n      step.initialized = nextInitTick[1]\n      const wordPos = nextInitTick[2]\n      const bitmapAddress = nextInitTick[4]\n      // console.log('got next tick', step.tickNext)\n      // console.log('last saved word pos', lastSavedWordPos, 'got word pos', wordPos)\n      if (lastSavedWordPos !== wordPos) {\n        console.log('pushing bitmap account', wordPos)\n        state.accounts.push({\n          pubkey: bitmapAddress,\n          isWritable: false,\n          isSigner: false,\n        });\n        lastSavedWordPos = wordPos\n      }\n\n      if (step.tickNext < TickMath.MIN_TICK) {\n        step.tickNext = TickMath.MIN_TICK\n      } else if (step.tickNext > TickMath.MAX_TICK) {\n        step.tickNext = TickMath.MAX_TICK\n      }\n\n      step.sqrtPriceNextX32 = TickMath.getSqrtRatioAtTick(step.tickNext)\n      ;[state.sqrtPriceX32, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.computeSwapStep(\n        state.sqrtPriceX32,\n        (zeroForOne\n        ? JSBI.lessThan(step.sqrtPriceNextX32, sqrtPriceLimitX32)\n        : JSBI.greaterThan(step.sqrtPriceNextX32, sqrtPriceLimitX32))\n          ? sqrtPriceLimitX32\n          : step.sqrtPriceNextX32,\n        state.liquidity,\n        state.amountSpecifiedRemaining,\n        this.fee\n      )\n\n      if (exactInput) {\n        state.amountSpecifiedRemaining = JSBI.subtract(\n          state.amountSpecifiedRemaining,\n          JSBI.add(step.amountIn, step.feeAmount)\n        )\n        state.amountCalculated = JSBI.subtract(state.amountCalculated, step.amountOut)\n      } else {\n        state.amountSpecifiedRemaining = JSBI.add(state.amountSpecifiedRemaining, step.amountOut)\n        state.amountCalculated = JSBI.add(state.amountCalculated, JSBI.add(step.amountIn, step.feeAmount))\n      }\n\n      // TODO\n      if (JSBI.equal(state.sqrtPriceX32, step.sqrtPriceNextX32)) {\n        // if the tick is initialized, run the tick transition\n        if (step.initialized) {\n          // push the crossed tick to accounts array\n          console.log('pushing tick account', step.tickNext)\n          state.accounts.push({\n            pubkey: await this.tickDataProvider.getTickAddress(step.tickNext),\n            isWritable: true,\n            isSigner: false,\n          })\n          // get the liquidity at this tick\n          let liquidityNet = JSBI.BigInt((await this.tickDataProvider.getTick(step.tickNext)).liquidityNet)\n          // if we're moving leftward, we interpret liquidityNet as the opposite sign\n          // safe because liquidityNet cannot be type(int128).min\n          if (zeroForOne) liquidityNet = JSBI.multiply(liquidityNet, NEGATIVE_ONE)\n\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet)\n        } else {\n          console.log('reached uninitialized tick', step.tickNext)\n        }\n\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext\n      } else if (state.sqrtPriceX32 != step.sqrtPriceStartX32) {\n        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX32)\n      }\n    }\n\n    return {\n      amountCalculated: state.amountCalculated,\n      sqrtRatioX32: state.sqrtPriceX32,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick,\n\n      // active ticks being flipped, plus each bitmap which is traversed\n      accounts: state.accounts,\n    }\n  }\n\n  public get tickSpacing(): number {\n    return TICK_SPACINGS[this.fee]\n  }\n}\n","import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q64, Q32, MaxUint32 } from '../internalConstants'\n\n/**\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\n * v3 router contract.\n * @param sqrtRatioAX32 The price at the lower boundary\n * @param sqrtRatioBX32 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, imprecise\n */\nfunction maxLiquidityForAmount0Imprecise(sqrtRatioAX32: JSBI, sqrtRatioBX32: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX32, sqrtRatioBX32)) {\n    ;[sqrtRatioAX32, sqrtRatioBX32] = [sqrtRatioBX32, sqrtRatioAX32]\n  }\n  const intermediate = JSBI.divide(JSBI.multiply(sqrtRatioAX32, sqrtRatioBX32), MaxUint32)\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount0), intermediate), JSBI.subtract(sqrtRatioBX32, sqrtRatioAX32))\n}\n\n/**\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits.\n * @param sqrtRatioAX32 The price at the lower boundary\n * @param sqrtRatioBX32 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, precise\n */\nfunction maxLiquidityForAmount0Precise(sqrtRatioAX32: JSBI, sqrtRatioBX32: JSBI, amount0: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX32, sqrtRatioBX32)) {\n    ;[sqrtRatioAX32, sqrtRatioBX32] = [sqrtRatioBX32, sqrtRatioAX32]\n  }\n\n  const numerator = JSBI.multiply(JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX32), sqrtRatioBX32)\n  const denominator = JSBI.multiply(MaxUint32, JSBI.subtract(sqrtRatioBX32, sqrtRatioAX32))\n\n  return JSBI.divide(numerator, denominator)\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token1\n * @param sqrtRatioAX32 The price at the lower tick boundary\n * @param sqrtRatioBX32 The price at the upper tick boundary\n * @param amount1 The token1 amount\n * @returns liquidity for amount1\n */\nfunction maxLiquidityForAmount1(sqrtRatioAX32: JSBI, sqrtRatioBX32: JSBI, amount1: BigintIsh): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX32, sqrtRatioBX32)) {\n    ;[sqrtRatioAX32, sqrtRatioBX32] = [sqrtRatioBX32, sqrtRatioAX32]\n  }\n  return JSBI.divide(JSBI.multiply(JSBI.BigInt(amount1), MaxUint32), JSBI.subtract(sqrtRatioBX32, sqrtRatioAX32))\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n * and the prices at the tick boundaries.\n * @param sqrtRatioCurrentX32 the current price\n * @param sqrtRatioAX32 price at lower boundary\n * @param sqrtRatioBX32 price at upper boundary\n * @param amount0 token0 amount\n * @param amount1 token1 amount\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\n * not what core can theoretically support\n */\nexport function maxLiquidityForAmounts(\n  sqrtRatioCurrentX32: JSBI,\n  sqrtRatioAX32: JSBI,\n  sqrtRatioBX32: JSBI,\n  amount0: BigintIsh,\n  amount1: BigintIsh,\n  useFullPrecision: boolean\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX32, sqrtRatioBX32)) {\n    ;[sqrtRatioAX32, sqrtRatioBX32] = [sqrtRatioBX32, sqrtRatioAX32]\n  }\n\n  // trying this out?\n  useFullPrecision = false\n  const maxLiquidityForAmount0 = maxLiquidityForAmount0Imprecise\n\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX32, sqrtRatioAX32)) {\n    return maxLiquidityForAmount0(sqrtRatioAX32, sqrtRatioBX32, amount0)\n  } else if (JSBI.lessThan(sqrtRatioCurrentX32, sqrtRatioBX32)) {\n    const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX32, sqrtRatioBX32, amount0)\n    const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX32, sqrtRatioCurrentX32, amount1)\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1\n  } else {\n    return maxLiquidityForAmount1(sqrtRatioAX32, sqrtRatioBX32, amount1)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, sqrt } from '@uniswap/sdk-core'\n\n/**\n * Returns the sqrt ratio as a Q32.32 corresponding to a given ratio of amount1 and amount0\n * @param amount1 The numerator amount i.e., the amount of token1\n * @param amount0 The denominator amount i.e., the amount of token0\n * @returns The sqrt ratio\n */\n\nexport function encodeSqrtRatioX32(amount1: BigintIsh, amount0: BigintIsh): JSBI {\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(64))\n  const denominator = JSBI.BigInt(amount0)\n  const ratioX64 = JSBI.divide(numerator, denominator)\n  return sqrt(ratioX64)\n}\n","import { Price, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { Q64 } from '../internalConstants'\nimport { encodeSqrtRatioX32 } from './encodeSqrtRatioX32'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns a price object corresponding to the input tick and the base/quote token\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\n * @param baseToken the base token of the price\n * @param quoteToken the quote token of the price\n * @param tick the tick for which to return the price\n */\nexport function tickToPrice(baseToken: Token, quoteToken: Token, tick: number): Price<Token, Token> {\n  const sqrtRatioX32 = TickMath.getSqrtRatioAtTick(tick)\n\n  const ratioX64 = JSBI.multiply(sqrtRatioX32, sqrtRatioX32)\n\n  return baseToken.sortsBefore(quoteToken)\n    ? new Price(baseToken, quoteToken, Q64, ratioX64)\n    : new Price(baseToken, quoteToken, ratioX64, Q64)\n}\n\n/**\n * Returns the first tick for which the given price is greater than or equal to the tick price\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\n * i.e. the price of the returned tick is less than or equal to the input price\n */\nexport function priceToClosestTick(price: Price<Token, Token>): number {\n  const sorted = price.baseCurrency.sortsBefore(price.quoteCurrency)\n\n  const sqrtRatioX96 = sorted\n    ? encodeSqrtRatioX32(price.numerator, price.denominator)\n    : encodeSqrtRatioX32(price.denominator, price.numerator)\n\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96)\n  const nextTickPrice = tickToPrice(price.baseCurrency, price.quoteCurrency, tick + 1)\n  if (sorted) {\n    if (!price.lessThan(nextTickPrice)) {\n      tick++\n    }\n  } else {\n    if (!price.greaterThan(nextTickPrice)) {\n      tick++\n    }\n  }\n  return tick\n}\n","import { BigintIsh, Percent, Price, CurrencyAmount, Token, MaxUint128 } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\nimport { maxLiquidityForAmounts } from '../utils/maxLiquidityForAmounts'\nimport { tickToPrice } from '../utils/priceTickConversions'\nimport { SqrtPriceMath } from '../utils/sqrtPriceMath'\nimport { TickMath } from '../utils/tickMath'\nimport { encodeSqrtRatioX32 } from '../utils/encodeSqrtRatioX32'\nimport { Pool } from './pool'\n\ninterface PositionConstructorArgs {\n  pool: Pool\n  tickLower: number\n  tickUpper: number\n  liquidity: BigintIsh\n}\n\n/**\n * Represents a position on a Uniswap V3 Pool\n */\nexport class Position {\n  public readonly pool: Pool\n  public readonly tickLower: number\n  public readonly tickUpper: number\n  public readonly liquidity: JSBI\n\n  // cached resuts for the getters\n  private _token0Amount: CurrencyAmount<Token> | null = null\n  private _token1Amount: CurrencyAmount<Token> | null = null\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null = null\n\n  /**\n   * Constructs a position for a given pool with the given liquidity\n   * @param pool For which pool the liquidity is assigned\n   * @param liquidity The amount of liquidity that is in the position\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   */\n  public constructor({ pool, liquidity, tickLower, tickUpper }: PositionConstructorArgs) {\n    invariant(tickLower < tickUpper, 'TICK_ORDER')\n    invariant(tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0, 'TICK_LOWER')\n    invariant(tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0, 'TICK_UPPER')\n\n    this.pool = pool\n    this.tickLower = tickLower\n    this.tickUpper = tickUpper\n    this.liquidity = JSBI.BigInt(liquidity)\n  }\n\n  /**\n   * Returns the price of token0 at the lower tick\n   */\n  public get token0PriceLower(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickLower)\n  }\n\n  /**\n   * Returns the price of token0 at the upper tick\n   */\n  public get token0PriceUpper(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickUpper)\n  }\n\n  /**\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount0(): CurrencyAmount<Token> {\n    if (this._token0Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX32,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token0Amount = CurrencyAmount.fromRawAmount(this.pool.token0, ZERO)\n      }\n    }\n    return this._token0Amount\n  }\n\n  /**\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount1(): CurrencyAmount<Token> {\n    if (this._token1Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(this.pool.token1, ZERO)\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX32,\n            this.liquidity,\n            false\n          )\n        )\n      } else {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false\n          )\n        )\n      }\n    }\n    return this._token1Amount\n  }\n\n  /**\n   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\n   * @returns The sqrt ratios after slippage\n   */\n  private ratiosAfterSlippage(slippageTolerance: Percent): { sqrtRatioX32Lower: JSBI; sqrtRatioX32Upper: JSBI } {\n    const priceLower = this.pool.token0Price.asFraction.multiply(new Percent(1).subtract(slippageTolerance))\n    const priceUpper = this.pool.token0Price.asFraction.multiply(slippageTolerance.add(1))\n    let sqrtRatioX32Lower = encodeSqrtRatioX32(priceLower.numerator, priceLower.denominator)\n    if (JSBI.lessThanOrEqual(sqrtRatioX32Lower, TickMath.MIN_SQRT_RATIO)) {\n      sqrtRatioX32Lower = JSBI.add(TickMath.MIN_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    let sqrtRatioX32Upper = encodeSqrtRatioX32(priceUpper.numerator, priceUpper.denominator)\n    if (JSBI.greaterThanOrEqual(sqrtRatioX32Upper, TickMath.MAX_SQRT_RATIO)) {\n      sqrtRatioX32Upper = JSBI.subtract(TickMath.MAX_SQRT_RATIO, JSBI.BigInt(1))\n    }\n    return {\n      sqrtRatioX32Lower,\n      sqrtRatioX32Upper\n    }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position\n   * with the given slippage tolerance\n   * @param slippageTolerance Tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public mintAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX32Upper, sqrtRatioX32Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX32Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX32Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX32Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX32Upper)\n    )\n\n    // because the router is imprecise, we need to calculate the position that will be created (assuming no slippage)\n    const positionThatWillBeCreated = Position.fromAmounts({\n      pool: this.pool,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n      ...this.mintAmounts, // the mint amounts are what will be passed as calldata\n      useFullPrecision: false\n    })\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const { amount0 } = new Position({\n      pool: poolUpper,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).mintAmounts\n    // ...and the lower for amount1\n    const { amount1 } = new Position({\n      pool: poolLower,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).mintAmounts\n\n    return { amount0, amount1 }\n  }\n\n  /**\n   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the\n   * position with the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public burnAmountsWithSlippage(slippageTolerance: Percent): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX32Upper, sqrtRatioX32Lower } = this.ratiosAfterSlippage(slippageTolerance)\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX32Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX32Lower)\n    )\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX32Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX32Upper)\n    )\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const amount0 = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount0\n    // ...and the lower for amount1\n    const amount1 = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper\n    }).amount1\n\n    return { amount0: amount0.quotient, amount1: amount1.quotient }\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at\n   * the current price for the pool\n   */\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    if (this._mintAmounts === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: ZERO\n        }\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX32,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          ),\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX32,\n            this.liquidity,\n            true\n          )\n        }\n      } else {\n        return {\n          amount0: ZERO,\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true\n          )\n        }\n      }\n    }\n    return this._mintAmounts\n  }\n\n  /**\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n   * and the prices at the tick boundaries.\n   * @param pool The pool for which the position should be created\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   * @param amount0 token0 amount\n   * @param amount1 token1 amount\n   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The amount of liquidity for the position\n   */\n  public static fromAmounts({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    amount1,\n    useFullPrecision\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    amount1: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    const sqrtRatioAX32 = TickMath.getSqrtRatioAtTick(tickLower)\n    const sqrtRatioBX32 = TickMath.getSqrtRatioAtTick(tickUpper)\n    return new Position({\n      pool,\n      tickLower,\n      tickUpper,\n      liquidity: maxLiquidityForAmounts(\n        pool.sqrtRatioX32,\n        sqrtRatioAX32,\n        sqrtRatioBX32,\n        amount0,\n        amount1,\n        useFullPrecision\n      )\n    })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount0 The desired amount of token0\n   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The position\n   */\n  public static fromAmount0({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    useFullPrecision\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount0: BigintIsh\n    useFullPrecision: boolean\n  }) {\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0, amount1: MaxUint128, useFullPrecision })\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount1 The desired amount of token1\n   * @returns The position\n   */\n  public static fromAmount1({\n    pool,\n    tickLower,\n    tickUpper,\n    amount1\n  }: {\n    pool: Pool\n    tickLower: number\n    tickUpper: number\n    amount1: BigintIsh\n  }) {\n    // this function always uses full precision,\n    return Position.fromAmounts({ pool, tickLower, tickUpper, amount0: MaxUint128, amount1, useFullPrecision: true })\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\nimport { Pool } from './pool'\n\n/**\n * Represents a list of pools through which a swap can occur\n * @template TInput The input token\n * @template TOutput The output token\n */\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: Pool[]\n  public readonly tokenPath: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `Pool` objects, ordered by the route the swap will take\n   * @param input The input token\n   * @param output The output token\n   */\n  public constructor(pools: Pool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, 'POOLS')\n\n    const chainId = pools[0].chainId\n    const allOnSameChain = pools.every(pool => pool.chainId === chainId)\n    invariant(allOnSameChain, 'CHAIN_IDS')\n\n    const wrappedInput = input.wrapped\n    invariant(pools[0].involvesToken(wrappedInput), 'INPUT')\n\n    invariant(pools[pools.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    /**\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\n     * */\n    const tokenPath: Token[] = [wrappedInput]\n    for (const [i, pool] of pools.entries()) {\n      const currentInputToken = tokenPath[i]\n      invariant(currentInputToken.equals(pool.token0) || currentInputToken.equals(pool.token1), 'PATH')\n      const nextToken = currentInputToken.equals(pool.token0) ? pool.token1 : pool.token0\n      tokenPath.push(nextToken)\n    }\n\n    this.pools = pools\n    this.tokenPath = tokenPath\n    this.input = input\n    this.output = output ?? tokenPath[tokenPath.length - 1]\n  }\n\n  public get chainId(): number {\n    return this.pools[0].chainId\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.token0)\n          ? {\n              nextInput: pool.token1,\n              price: price.multiply(pool.token0Price)\n            }\n          : {\n              nextInput: pool.token0,\n              price: price.multiply(pool.token1Price)\n            }\n      },\n      this.pools[0].token0.equals(this.input.wrapped)\n        ? {\n            nextInput: this.pools[0].token1,\n            price: this.pools[0].token0Price\n          }\n        : {\n            nextInput: this.pools[0].token0,\n            price: this.pools[0].token1Price\n          }\n    ).price\n\n    return (this._midPrice = new Price(this.input, this.output, price.denominator, price.numerator))\n  }\n}\n","import { BigintIsh } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\n/**\n * Generated method parameters for executing a call.\n */\nexport interface MethodParameters {\n  /**\n   * The hex encoded calldata to perform the given operation\n   */\n  calldata: string\n  /**\n   * The amount of ether (wei) to send in hex.\n   */\n  value: string\n}\n\n/**\n * Converts a big int to a hex string\n * @param bigintIsh\n * @returns The hex encoded calldata\n */\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh)\n  let hex = bigInt.toString(16)\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`\n  }\n  return `0x${hex}`\n}\n","import { pack } from '@ethersproject/solidity'\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool } from '../entities/pool'\nimport { Route } from '../entities/route'\n\n/**\n * Converts a route to a hex encoded path\n * @param route the v3 path to convert to an encoded path\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\n */\nexport function encodeRouteToPath(route: Route<Currency, Currency>, exactOutput: boolean): string {\n  const firstInputToken: Token = route.input.wrapped\n\n  const { path, types } = route.pools.reduce(\n    (\n      { inputToken, path, types }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool,\n      index\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: ['address', 'uint24', 'address'],\n          path: [inputToken.address, pool.fee, outputToken.address]\n        }\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, 'uint24', 'address'],\n          path: [...path, pool.fee, outputToken.address]\n        }\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] }\n  )\n\n  return exactOutput ? pack(types.reverse(), path.reverse()) : pack(types, path)\n}\n","/**\n * Determines if a tick list is sorted\n * @param list The tick list\n * @param comparator The comparator\n * @returns true if sorted\n */\nexport function isSorted<T>(list: Array<T>, comparator: (a: T, b: T) => number): boolean {\n  for (let i = 0; i < list.length - 1; i++) {\n    if (comparator(list[i], list[i + 1]) > 0) {\n      return false\n    }\n  }\n  return true\n}\n","import invariant from 'tiny-invariant'\nimport { TickMath } from './tickMath'\n\n/**\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\n * @param tick the target tick\n * @param tickSpacing the spacing of the pool\n */\nexport function nearestUsableTick(tick: number, tickSpacing: number) {\n  invariant(Number.isInteger(tick) && Number.isInteger(tickSpacing), 'INTEGERS')\n  invariant(tickSpacing > 0, 'TICK_SPACING')\n  invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK, 'TICK_BOUND')\n  const rounded = Math.round(tick / tickSpacing) * tickSpacing\n  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing\n  else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing\n  else return rounded\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ZERO } from '../internalConstants'\nimport { isSorted } from './isSorted'\nimport { Tick } from '../entities/tick'\n\nfunction tickComparator(a: Tick, b: Tick) {\n  return a.index - b.index\n}\n\n/**\n * Utility methods for interacting with sorted lists of ticks\n */\nexport abstract class TickList {\n  /**\n   * Cannot be constructed\n   */\n  private constructor() {}\n\n  public static validateList(ticks: Tick[], tickSpacing: number) {\n    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO')\n    // ensure ticks are spaced appropriately\n    invariant(\n      ticks.every(({ index }) => index % tickSpacing === 0),\n      'TICK_SPACING'\n    )\n\n    // ensure tick liquidity deltas sum to 0\n    invariant(\n      JSBI.equal(\n        ticks.reduce((accumulator, { liquidityNet }) => JSBI.add(accumulator, liquidityNet), ZERO),\n        ZERO\n      ),\n      'ZERO_NET'\n    )\n\n    invariant(isSorted(ticks, tickComparator), 'SORTED')\n  }\n\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick < ticks[0].index\n  }\n\n  public static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH')\n    return tick >= ticks[ticks.length - 1].index\n  }\n\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\n    const tick = ticks[this.binarySearch(ticks, index)]\n    invariant(tick.index === index, 'NOT_CONTAINED')\n    return tick\n  }\n\n  /**\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\n   * @param ticks list of ticks\n   * @param tick tick to find the largest tick that is less than or equal to tick\n   * @private\n   */\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\n    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n\n    let l = 0\n    let r = ticks.length - 1\n    let i\n    while (true) {\n      i = Math.floor((l + r) / 2)\n\n      if (ticks[i].index <= tick && (i === ticks.length - 1 || ticks[i + 1].index > tick)) {\n        return i\n      }\n\n      if (ticks[i].index < tick) {\n        l = i + 1\n      } else {\n        r = i - 1\n      }\n    }\n  }\n\n  public static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick {\n    if (lte) {\n      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST')\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\n        return ticks[ticks.length - 1]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index]\n    } else {\n      invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST')\n      if (this.isBelowSmallest(ticks, tick)) {\n        return ticks[0]\n      }\n      const index = this.binarySearch(ticks, tick)\n      return ticks[index + 1]\n    }\n  }\n\n  public static nextInitializedTickWithinOneWord(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n    tickSpacing: number\n  ): [number, boolean] {\n    const compressed = Math.floor(tick / tickSpacing) // matches rounding in the code\n\n    if (lte) {\n      const wordPos = compressed >> 8\n      const minimum = (wordPos << 8) * tickSpacing\n\n      if (TickList.isBelowSmallest(ticks, tick)) {\n        return [minimum, false]\n      }\n\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.max(minimum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    } else {\n      const wordPos = (compressed + 1) >> 8\n      const maximum = ((wordPos + 1) << 8) * tickSpacing - 1\n\n      if (this.isAtOrAboveLargest(ticks, tick)) {\n        return [maximum, false]\n      }\n\n      const index = this.nextInitializedTick(ticks, tick, lte).index\n      const nextInitializedTick = Math.min(maximum, index)\n      return [nextInitializedTick, nextInitializedTick === index]\n    }\n  }\n}\n","export const BITMAP_SEED = Buffer.from('b')\nexport const POOL_SEED = Buffer.from('p')\nexport const POSITION_SEED = Buffer.from('ps')\nexport const OBSERVATION_SEED = Buffer.from('o')\nexport const TICK_SEED = Buffer.from('t')\nexport const FEE_SEED = Buffer.from('f')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh } from '@uniswap/sdk-core'\nimport { TickMath } from '../utils'\n\nexport interface TickConstructorArgs {\n  index: number\n  liquidityGross: BigintIsh\n  liquidityNet: BigintIsh\n}\n\nexport class Tick {\n  public readonly index: number\n  public readonly liquidityGross: JSBI\n  public readonly liquidityNet: JSBI\n\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK')\n    this.index = index\n    this.liquidityGross = JSBI.BigInt(liquidityGross)\n    this.liquidityNet = JSBI.BigInt(liquidityNet)\n  }\n}\n\nexport type TickPosition = {\n  wordPos: number,\n  bitPos: number\n}\n\n/**\n * Computes the bitmap position for a bit.\n * @param tickBySpacing Tick divided by spacing\n * @returns the word and bit position for the given tick\n */\n export function tickPosition(tickBySpacing: number): TickPosition {\n  return {\n    wordPos: tickBySpacing >> 8,\n    bitPos: Math.abs(tickBySpacing % 256),\n  }\n}\n","import { Currency, Fraction, Percent, Price, sortedInsert, CurrencyAmount, TradeType, Token } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../internalConstants'\nimport { Pool } from './pool'\nimport { Route } from './route'\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      const bHops = b.swaps.reduce((total, cur) => total + cur.route.tokenPath.length, 0)\n      return aHops - bHops\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): Route<TInput, TOutput> {\n    invariant(this.swaps.length == 1, 'MULTIPLE_ROUTES')\n    return this.swaps[0].route\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact in trade\n   * @param amountIn The amount being passed in\n   * @returns The exact in trade\n   */\n  public static async exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>> {\n    return Trade.fromRoute(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact out trade\n   * @param amountOut The amount returned by the trade\n   * @returns The exact out trade\n   */\n  public static async exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\n    return Trade.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n    let inputAmount: CurrencyAmount<TInput>\n    let outputAmount: CurrencyAmount<TOutput>\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      amounts[0] = amount.wrapped\n      for (let i = 0; i < route.tokenPath.length - 1; i++) {\n        const pool = route.pools[i]\n        const [outputAmount] = await pool.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = amount.wrapped\n      for (let i = route.tokenPath.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        const [inputAmount] = await pool.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n\n    return new Trade({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType\n    })\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n      route: Route<TInput, TOutput>\n    }[],\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length)\n      let inputAmount: CurrencyAmount<TInput>\n      let outputAmount: CurrencyAmount<TOutput>\n\n      if (tradeType === TradeType.EXACT_INPUT) {\n        invariant(amount.currency.equals(route.input), 'INPUT')\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n        amounts[0] = CurrencyAmount.fromFractionalAmount(route.input.wrapped, amount.numerator, amount.denominator)\n\n        for (let i = 0; i < route.tokenPath.length - 1; i++) {\n          const pool = route.pools[i]\n          const [outputAmount] = await pool.getOutputAmount(amounts[i])\n          amounts[i + 1] = outputAmount\n        }\n\n        outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amounts[amounts.length - 1].numerator,\n          amounts[amounts.length - 1].denominator\n        )\n      } else {\n        invariant(amount.currency.equals(route.output), 'OUTPUT')\n        outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n        amounts[amounts.length - 1] = CurrencyAmount.fromFractionalAmount(\n          route.output.wrapped,\n          amount.numerator,\n          amount.denominator\n        )\n\n        for (let i = route.tokenPath.length - 1; i > 0; i--) {\n          const pool = route.pools[i - 1]\n          const [inputAmount] = await pool.getInputAmount(amounts[i])\n          amounts[i - 1] = inputAmount\n        }\n\n        inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amounts[0].numerator, amounts[0].denominator)\n      }\n\n      populatedRoutes.push({ route, inputAmount, outputAmount })\n    }\n\n    return new Trade({\n      routes: populatedRoutes,\n      tradeType\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    route: Route<TInput, TOutput>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route\n        }\n      ]\n    })\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType\n  >(constructorArguments: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }): Trade<TInput, TOutput, TTradeType> {\n    return new Trade(constructorArguments)\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType\n  }: {\n    routes: {\n      route: Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency\n    const outputCurrency = routes[0].outputAmount.currency\n    invariant(\n      routes.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      routes.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    const numPools = routes.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        Pool.getAddress(pool.token0, pool.token1, pool.fee)\n          .then(address => {\n            poolAddressSet.add(address)\n          })\n      }\n    }\n\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n\n    this.swaps = routes\n    this.tradeType = tradeType\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountIn.currency) && !pool.token1.equals(amountIn.currency)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = await pool.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([...currentPools, pool], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the desired currency amount out\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact out trade\n   */\n  public static async bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pools: Pool[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Promise<Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\n    invariant(pools.length > 0, 'POOLS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPools.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.currency) && !pool.token1.equals(amountOut.currency)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = await pool.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pool\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          await Trade.fromRoute(\n            new Route([pool, ...currentPools], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        await Trade.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pool, ...currentPools],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BN } from \"@project-serum/anchor\"\n\n/**\n * Decodes the 256 bit bitmap stored in a bitmap account\n * @param x Bitmap encoded as [u64; 4]\n * @returns 256 bit word\n */\nexport function generateBitmapWord(x: BN[]) {\n  return x[0]\n    .add(x[1].shln(64))\n    .add(x[2].shln(126))\n    .add(x[3].shln(192))\n}\n\n/**\n * Returns the most significant non-zero bit in the word\n * @param x \n * @returns \n */\nexport function msb(x: BN) {\n  return x.bitLength() - 1\n}\n\n/**\n * Returns the least significant non-zero bit in the word\n * @param x \n * @returns \n */\nexport function lsb(x: BN) {\n  return x.zeroBits()\n}\n\nexport type NextBit = {\n  next: number,\n  initialized: boolean,\n}\n\n/**\n * Returns the bitmap index (0 - 255) for the next initialized tick.\n * \n * If no initialized tick is available, returns the first bit (index 0) the word in lte case,\n * and the last bit in gte case.\n * @param word The bitmap word as a u256 number\n * @param bitPos The starting bit position\n * @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick),\n * or to the right (greater than or equal to)\n * @returns Bit index and whether it is initialized\n */\nexport function nextInitializedBit(word: BN, bitPos: number, lte: boolean): NextBit {\n  if (lte) {\n    // all the 1s at or to the right of the current bit_pos\n    const mask = new BN(1).shln(bitPos).subn(1).add(new BN(1).shln(bitPos))\n    const masked = word.and(mask)\n    const initialized = !masked.eqn(0)\n    const next = initialized\n      ? msb(masked)\n      : 0\n    return { next, initialized }\n  } else {\n    // all the 1s at or to the left of the bit_pos\n    const mask = new BN(1).shln(bitPos).subn(1).notn(256)\n    const masked = word.and(mask)\n    const initialized = !masked.eqn(0)\n    const next = initialized\n      ? msb(masked)\n      : 255\n    return { next, initialized }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { abi } from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IMulticall.sol/IMulticall.json'\n\nexport abstract class Multicall {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[]): string {\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    return calldatas.length === 1 ? calldatas[0] : Multicall.INTERFACE.encodeFunctionData('multicall', [calldatas])\n  }\n}\n","import { BigintIsh, Token } from '@uniswap/sdk-core'\nimport { Interface } from '@ethersproject/abi'\nimport { abi } from '@uniswap/v3-periphery/artifacts/contracts/interfaces/ISelfPermit.sol/ISelfPermit.json'\nimport { toHex } from './utils'\n\nexport interface StandardPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  amount: BigintIsh\n  deadline: BigintIsh\n}\n\nexport interface AllowedPermitArguments {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  nonce: BigintIsh\n  expiry: BigintIsh\n}\n\nexport type PermitOptions = StandardPermitArguments | AllowedPermitArguments\n\nfunction isAllowedPermit(permitOptions: PermitOptions): permitOptions is AllowedPermitArguments {\n  return 'nonce' in permitOptions\n}\n\nexport abstract class SelfPermit {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodePermit(token: Token, options: PermitOptions) {\n    return isAllowedPermit(options)\n      ? SelfPermit.INTERFACE.encodeFunctionData('selfPermitAllowed', [\n          token.address,\n          toHex(options.nonce),\n          toHex(options.expiry),\n          options.v,\n          options.r,\n          options.s\n        ])\n      : SelfPermit.INTERFACE.encodeFunctionData('selfPermit', [\n          token.address,\n          toHex(options.amount),\n          toHex(options.deadline),\n          options.v,\n          options.r,\n          options.s\n        ])\n  }\n}\n","import JSBI from 'jsbi'\nimport { Interface } from '@ethersproject/abi'\nimport { abi } from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IPeripheryPaymentsWithFee.sol/IPeripheryPaymentsWithFee.json'\nimport { Percent, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { toHex } from './utils/calldata'\n\nexport interface FeeOptions {\n  /**\n   * The percent of the output that will be taken as a fee.\n   */\n  fee: Percent\n\n  /**\n   * The recipient of the fee.\n   */\n  recipient: string\n}\n\nexport abstract class Payments {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeFeeBips(fee: Percent): string {\n    return toHex(fee.multiply(10_000).quotient)\n  }\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient: string, feeOptions?: FeeOptions): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('unwrapWETH9WithFee', [\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('unwrapWETH9', [toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient: string,\n    feeOptions?: FeeOptions\n  ): string {\n    recipient = validateAndParseAddress(recipient)\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee)\n      const feeRecipient: string = validateAndParseAddress(feeOptions.recipient)\n\n      return Payments.INTERFACE.encodeFunctionData('sweepTokenWithFee', [\n        token.address,\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient\n      ])\n    } else {\n      return Payments.INTERFACE.encodeFunctionData('sweepToken', [token.address, toHex(amountMinimum), recipient])\n    }\n  }\n\n  public static encodeRefundETH(): string {\n    return Payments.INTERFACE.encodeFunctionData('refundETH')\n  }\n}\n","import {\n  BigintIsh,\n  Percent,\n  Token,\n  CurrencyAmount,\n  validateAndParseAddress,\n  Currency,\n  NativeCurrency\n} from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { Position } from './entities/position'\nimport { ONE, ZERO } from './internalConstants'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { Interface } from '@ethersproject/abi'\nimport { abi } from '@uniswap/v3-periphery/artifacts/contracts/NonfungiblePositionManager.sol/NonfungiblePositionManager.json'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { ADDRESS_ZERO } from './constants'\nimport { Pool } from './entities'\nimport { Multicall } from './multicall'\nimport { Payments } from './payments'\n\nconst MaxUint128 = toHex(JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)), JSBI.BigInt(1)))\n\nexport interface MintSpecificOptions {\n  /**\n   * The account that should receive the minted NFT.\n   */\n  recipient: string\n\n  /**\n   * Creates pool if not initialized before mint.\n   */\n  createPool?: boolean\n}\n\nexport interface IncreaseSpecificOptions {\n  /**\n   * Indicates the ID of the position to increase liquidity for.\n   */\n  tokenId: BigintIsh\n}\n\n/**\n * Options for producing the calldata to add liquidity.\n */\nexport interface CommonAddLiquidityOptions {\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\n   */\n  useNative?: NativeCurrency\n\n  /**\n   * The optional permit parameters for spending token0\n   */\n  token0Permit?: PermitOptions\n\n  /**\n   * The optional permit parameters for spending token1\n   */\n  token1Permit?: PermitOptions\n}\n\nexport type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions\nexport type IncreaseOptions = CommonAddLiquidityOptions & IncreaseSpecificOptions\n\nexport type AddLiquidityOptions = MintOptions | IncreaseOptions\n\nexport interface SafeTransferOptions {\n  /**\n   * The account sending the NFT.\n   */\n  sender: string\n\n  /**\n   * The account that should receive the NFT.\n   */\n  recipient: string\n\n  /**\n   * The id of the token being sent.\n   */\n  tokenId: BigintIsh\n  /**\n   * The optional parameter that passes data to the `onERC721Received` call for the staker\n   */\n  data?: string\n}\n\n// type guard\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some(k => k === 'recipient')\n}\n\nexport interface CollectOptions {\n  /**\n   * Indicates the ID of the position to collect for.\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed0: CurrencyAmount<Currency>\n\n  /**\n   * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed1: CurrencyAmount<Currency>\n\n  /**\n   * The account that should receive the tokens.\n   */\n  recipient: string\n}\n\nexport interface NFTPermitOptions {\n  v: 0 | 1 | 27 | 28\n  r: string\n  s: string\n  deadline: BigintIsh\n  spender: string\n}\n\n/**\n * Options for producing the calldata to exit a position.\n */\nexport interface RemoveLiquidityOptions {\n  /**\n   * The ID of the token to exit\n   */\n  tokenId: BigintIsh\n\n  /**\n   * The percentage of position liquidity to exit.\n   */\n  liquidityPercentage: Percent\n\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\n   */\n  burnToken?: boolean\n\n  /**\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\n   */\n  permit?: NFTPermitOptions\n\n  /**\n   * Parameters to be passed on to collect\n   */\n  collectOptions: Omit<CollectOptions, 'tokenId'>\n}\n\nexport abstract class NonfungiblePositionManager {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeCreate(pool: Pool): string {\n    return NonfungiblePositionManager.INTERFACE.encodeFunctionData('createAndInitializePoolIfNecessary', [\n      pool.token0.address,\n      pool.token1.address,\n      pool.fee,\n      toHex(pool.sqrtRatioX32)\n    ])\n  }\n\n  public static createCallParameters(pool: Pool): MethodParameters {\n    return {\n      calldata: this.encodeCreate(pool),\n      value: toHex(0)\n    }\n  }\n\n  public static addCallParameters(position: Position, options: AddLiquidityOptions): MethodParameters {\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    const calldatas: string[] = []\n\n    // get amounts\n    const { amount0: amount0Desired, amount1: amount1Desired } = position.mintAmounts\n\n    // adjust for slippage\n    const minimumAmounts = position.mintAmountsWithSlippage(options.slippageTolerance)\n    const amount0Min = toHex(minimumAmounts.amount0)\n    const amount1Min = toHex(minimumAmounts.amount1)\n\n    const deadline = toHex(options.deadline)\n\n    // create pool if needed\n    if (isMint(options) && options.createPool) {\n      calldatas.push(this.encodeCreate(position.pool))\n    }\n\n    // permits if necessary\n    if (options.token0Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token0, options.token0Permit))\n    }\n    if (options.token1Permit) {\n      calldatas.push(SelfPermit.encodePermit(position.pool.token1, options.token1Permit))\n    }\n\n    // mint\n    if (isMint(options)) {\n      const recipient: string = validateAndParseAddress(options.recipient)\n\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('mint', [\n          {\n            token0: position.pool.token0.address,\n            token1: position.pool.token1.address,\n            fee: position.pool.fee,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            recipient,\n            deadline\n          }\n        ])\n      )\n    } else {\n      // increase\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('increaseLiquidity', [\n          {\n            tokenId: toHex(options.tokenId),\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            deadline\n          }\n        ])\n      )\n    }\n\n    let value: string = toHex(0)\n\n    if (options.useNative) {\n      const wrapped = options.useNative.wrapped\n      invariant(position.pool.token0.equals(wrapped) || position.pool.token1.equals(wrapped), 'NO_WETH')\n\n      const wrappedValue = position.pool.token0.equals(wrapped) ? amount0Desired : amount1Desired\n\n      // we only need to refund if we're actually sending ETH\n      if (JSBI.greaterThan(wrappedValue, ZERO)) {\n        calldatas.push(Payments.encodeRefundETH())\n      }\n\n      value = toHex(wrappedValue)\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value\n    }\n  }\n\n  private static encodeCollect(options: CollectOptions): string[] {\n    const calldatas: string[] = []\n\n    const tokenId = toHex(options.tokenId)\n\n    const involvesETH =\n      options.expectedCurrencyOwed0.currency.isNative || options.expectedCurrencyOwed1.currency.isNative\n\n    const recipient = validateAndParseAddress(options.recipient)\n\n    // collect\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('collect', [\n        {\n          tokenId,\n          recipient: involvesETH ? ADDRESS_ZERO : recipient,\n          amount0Max: MaxUint128,\n          amount1Max: MaxUint128\n        }\n      ])\n    )\n\n    if (involvesETH) {\n      const ethAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed0.quotient\n        : options.expectedCurrencyOwed1.quotient\n      const token = options.expectedCurrencyOwed0.currency.isNative\n        ? (options.expectedCurrencyOwed1.currency as Token)\n        : (options.expectedCurrencyOwed0.currency as Token)\n      const tokenAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed1.quotient\n        : options.expectedCurrencyOwed0.quotient\n\n      calldatas.push(Payments.encodeUnwrapWETH9(ethAmount, recipient))\n      calldatas.push(Payments.encodeSweepToken(token, tokenAmount, recipient))\n    }\n\n    return calldatas\n  }\n\n  public static collectCallParameters(options: CollectOptions): MethodParameters {\n    const calldatas: string[] = NonfungiblePositionManager.encodeCollect(options)\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   * Produces the calldata for completely or partially exiting a position\n   * @param position The position to exit\n   * @param options Additional information necessary for generating the calldata\n   * @returns The call parameters\n   */\n  public static removeCallParameters(position: Position, options: RemoveLiquidityOptions): MethodParameters {\n    const calldatas: string[] = []\n\n    const deadline = toHex(options.deadline)\n    const tokenId = toHex(options.tokenId)\n\n    // construct a partial position with a percentage of liquidity\n    const partialPosition = new Position({\n      pool: position.pool,\n      liquidity: options.liquidityPercentage.multiply(position.liquidity).quotient,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper\n    })\n    invariant(JSBI.greaterThan(partialPosition.liquidity, ZERO), 'ZERO_LIQUIDITY')\n\n    // slippage-adjusted underlying amounts\n    const { amount0: amount0Min, amount1: amount1Min } = partialPosition.burnAmountsWithSlippage(\n      options.slippageTolerance\n    )\n\n    if (options.permit) {\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n          validateAndParseAddress(options.permit.spender),\n          tokenId,\n          toHex(options.permit.deadline),\n          options.permit.v,\n          options.permit.r,\n          options.permit.s\n        ])\n      )\n    }\n\n    // remove liquidity\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData('decreaseLiquidity', [\n        {\n          tokenId,\n          liquidity: toHex(partialPosition.liquidity),\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          deadline\n        }\n      ])\n    )\n\n    const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } = options.collectOptions\n    calldatas.push(\n      ...NonfungiblePositionManager.encodeCollect({\n        tokenId: toHex(options.tokenId),\n        // add the underlying value to the expected currency already owed\n        expectedCurrencyOwed0: expectedCurrencyOwed0.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed0.currency, amount0Min)\n        ),\n        expectedCurrencyOwed1: expectedCurrencyOwed1.add(\n          CurrencyAmount.fromRawAmount(expectedCurrencyOwed1.currency, amount1Min)\n        ),\n        ...rest\n      })\n    )\n\n    if (options.liquidityPercentage.equalTo(ONE)) {\n      if (options.burnToken) {\n        calldatas.push(NonfungiblePositionManager.INTERFACE.encodeFunctionData('burn', [tokenId]))\n      }\n    } else {\n      invariant(options.burnToken !== true, 'CANNOT_BURN')\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  public static safeTransferFromParameters(options: SafeTransferOptions): MethodParameters {\n    const recipient = validateAndParseAddress(options.recipient)\n    const sender = validateAndParseAddress(options.sender)\n\n    let calldata: string\n    if (options.data) {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n        'safeTransferFrom(address,address,uint256,bytes)',\n        [sender, recipient, toHex(options.tokenId), options.data]\n      )\n    } else {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('safeTransferFrom(address,address,uint256)', [\n        sender,\n        recipient,\n        toHex(options.tokenId)\n      ])\n    }\n    return {\n      calldata: calldata,\n      value: toHex(0)\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { encodeRouteToPath } from './utils'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { abi } from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'\nimport { Route } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Optional arguments to send to the quoter.\n */\nexport interface QuoteOptions {\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n}\n\n/**\n * Represents the Uniswap V3 QuoterV1 contract with a method for returning the formatted\n * calldata needed to call the quoter contract.\n */\nexport abstract class SwapQuoter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Produces the on-chain method name of the appropriate function within QuoterV2,\n   * and the relevant hex encoded parameters.\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The swap route, a list of pools through which a swap can occur\n   * @param amount The amount of the quote, either an amount in, or an amount out\n   * @param tradeType The trade type, either exact input or exact output\n   * @returns The formatted calldata\n   */\n  public static quoteCallParameters<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amount: CurrencyAmount<TInput | TOutput>,\n    tradeType: TradeType,\n    options: QuoteOptions = {}\n  ): MethodParameters {\n    const singleHop = route.pools.length === 1\n    const quoteAmount: string = toHex(amount.quotient)\n    let calldata: string\n\n    if (singleHop) {\n      if (tradeType === TradeType.EXACT_INPUT) {\n        calldata = SwapQuoter.INTERFACE.encodeFunctionData(`quoteExactInputSingle`, [\n          route.tokenPath[0].address,\n          route.tokenPath[1].address,\n          route.pools[0].fee,\n          quoteAmount,\n          toHex(options?.sqrtPriceLimitX96 ?? 0)\n        ])\n      } else {\n        calldata = SwapQuoter.INTERFACE.encodeFunctionData(`quoteExactOutputSingle`, [\n          route.tokenPath[0].address,\n          route.tokenPath[1].address,\n          route.pools[0].fee,\n          quoteAmount,\n          toHex(options?.sqrtPriceLimitX96 ?? 0)\n        ])\n      }\n    } else {\n      invariant(options?.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n      const path: string = encodeRouteToPath(route, tradeType === TradeType.EXACT_OUTPUT)\n\n      if (tradeType === TradeType.EXACT_INPUT) {\n        calldata = SwapQuoter.INTERFACE.encodeFunctionData('quoteExactInput', [path, quoteAmount])\n      } else {\n        calldata = SwapQuoter.INTERFACE.encodeFunctionData('quoteExactOutput', [path, quoteAmount])\n      }\n    }\n    return {\n      calldata,\n      value: toHex(0)\n    }\n  }\n}\n","import { BigintIsh, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { defaultAbiCoder, Interface } from '@ethersproject/abi'\nimport { abi } from '@uniswap/v3-staker/artifacts/contracts/UniswapV3Staker.sol/UniswapV3Staker.json'\nimport { Pool } from './entities'\nimport { Multicall } from './multicall'\n\nexport type FullWithdrawOptions = ClaimOptions & WithdrawOptions\n/**\n * Represents a unique staking program.\n */\nexport interface IncentiveKey {\n  /**\n   * The token rewarded for participating in the staking program.\n   */\n  rewardToken: Token\n  /**\n   * The pool that the staked positions must provide in.\n   */\n  pool: Pool\n  /**\n   * The time when the incentive program begins.\n   */\n  startTime: BigintIsh\n  /**\n   * The time that the incentive program ends.\n   */\n  endTime: BigintIsh\n  /**\n   * The address which receives any remaining reward tokens at `endTime`.\n   */\n  refundee: string\n}\n\n/**\n * Options to specify when claiming rewards.\n */\nexport interface ClaimOptions {\n  /**\n   * The id of the NFT\n   */\n  tokenId: BigintIsh\n\n  /**\n   * Address to send rewards to.\n   */\n  recipient: string\n\n  /**\n   * The amount of `rewardToken` to claim. 0 claims all.\n   */\n  amount?: BigintIsh\n}\n/**\n * Options to specify when withdrawing a position.\n */\nexport interface WithdrawOptions {\n  /**\n   * Set when withdrawing. The position will be sent to `owner` on withdraw.\n   */\n  owner: string\n\n  /**\n   * Set when withdrawing. `data` is passed to `safeTransferFrom` when transferring the position from contract back to owner.\n   */\n  data?: string\n}\n\nexport abstract class Staker {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  protected constructor() {}\n  private static INCENTIVE_KEY_ABI =\n    'tuple(address rewardToken, address pool, uint256 startTime, uint256 endTime, address refundee)'\n\n  /**\n   *  To claim rewards, must unstake and then claim.\n   * @param incentiveKey The unique identifier of a staking program.\n   * @param options Options for producing the calldata to claim. Can't claim unless you unstake.\n   * @returns The calldatas for 'unstakeToken' and 'claimReward'.\n   */\n  private static encodeClaim(incentiveKey: IncentiveKey, options: ClaimOptions): string[] {\n    const calldatas: string[] = []\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('unstakeToken', [\n        this._encodeIncentiveKey(incentiveKey),\n        toHex(options.tokenId)\n      ])\n    )\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const amount = options.amount ?? 0\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('claimReward', [incentiveKey.rewardToken.address, recipient, toHex(amount)])\n    )\n    return calldatas\n  }\n\n  /**\n   *\n   * Note:  A `tokenId` can be staked in many programs but to claim rewards and continue the program you must unstake, claim, and then restake.\n   * @param incentiveKeys An IncentiveKey or array of IncentiveKeys that `tokenId` is staked in.\n   * Input an array of IncentiveKeys to claim rewards for each program.\n   * @param options ClaimOptions to specify tokenId, recipient, and amount wanting to collect.\n   * Note that you can only specify one amount and one recipient across the various programs if you are collecting from multiple programs at once.\n   * @returns\n   */\n  public static collectRewards(incentiveKeys: IncentiveKey | IncentiveKey[], options: ClaimOptions): MethodParameters {\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n    let calldatas: string[] = []\n\n    for (let i = 0; i < incentiveKeys.length; i++) {\n      // the unique program tokenId is staked in\n      const incentiveKey = incentiveKeys[i]\n      // unstakes and claims for the unique program\n      calldatas = calldatas.concat(this.encodeClaim(incentiveKey, options))\n      // re-stakes the position for the unique program\n      calldatas.push(\n        Staker.INTERFACE.encodeFunctionData('stakeToken', [\n          this._encodeIncentiveKey(incentiveKey),\n          toHex(options.tokenId)\n        ])\n      )\n    }\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   *\n   * @param incentiveKeys A list of incentiveKeys to unstake from. Should include all incentiveKeys (unique staking programs) that `options.tokenId` is staked in.\n   * @param withdrawOptions Options for producing claim calldata and withdraw calldata. Can't withdraw without unstaking all programs for `tokenId`.\n   * @returns Calldata for unstaking, claiming, and withdrawing.\n   */\n  public static withdrawToken(\n    incentiveKeys: IncentiveKey | IncentiveKey[],\n    withdrawOptions: FullWithdrawOptions\n  ): MethodParameters {\n    let calldatas: string[] = []\n\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n\n    const claimOptions = {\n      tokenId: withdrawOptions.tokenId,\n      recipient: withdrawOptions.recipient,\n      amount: withdrawOptions.amount\n    }\n\n    for (let i = 0; i < incentiveKeys.length; i++) {\n      const incentiveKey = incentiveKeys[i]\n      calldatas = calldatas.concat(this.encodeClaim(incentiveKey, claimOptions))\n    }\n    const owner = validateAndParseAddress(withdrawOptions.owner)\n    calldatas.push(\n      Staker.INTERFACE.encodeFunctionData('withdrawToken', [\n        toHex(withdrawOptions.tokenId),\n        owner,\n        withdrawOptions.data ? withdrawOptions.data : toHex(0)\n      ])\n    )\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0)\n    }\n  }\n\n  /**\n   *\n   * @param incentiveKeys A single IncentiveKey or array of IncentiveKeys to be encoded and used in the data parameter in `safeTransferFrom`\n   * @returns An IncentiveKey as a string\n   */\n  public static encodeDeposit(incentiveKeys: IncentiveKey | IncentiveKey[]): string {\n    incentiveKeys = Array.isArray(incentiveKeys) ? incentiveKeys : [incentiveKeys]\n    let data: string\n\n    if (incentiveKeys.length > 1) {\n      const keys = []\n      for (let i = 0; i < incentiveKeys.length; i++) {\n        const incentiveKey = incentiveKeys[i]\n        keys.push(this._encodeIncentiveKey(incentiveKey))\n      }\n      data = defaultAbiCoder.encode([`${Staker.INCENTIVE_KEY_ABI}[]`], [keys])\n    } else {\n      data = defaultAbiCoder.encode([Staker.INCENTIVE_KEY_ABI], [this._encodeIncentiveKey(incentiveKeys[0])])\n    }\n    return data\n  }\n  /**\n   *\n   * @param incentiveKey An `IncentiveKey` which represents a unique staking program.\n   * @returns An encoded IncentiveKey to be read by ethers\n   */\n  private static _encodeIncentiveKey(incentiveKey: IncentiveKey): {} {\n    const { token0, token1, fee } = incentiveKey.pool\n    const refundee = validateAndParseAddress(incentiveKey.refundee)\n    return {\n      rewardToken: incentiveKey.rewardToken.address,\n      pool: Pool.getAddress(token0, token1, fee),\n      startTime: toHex(incentiveKey.startTime),\n      endTime: toHex(incentiveKey.endTime),\n      refundee\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport { Trade } from './entities/trade'\nimport { ADDRESS_ZERO } from './constants'\nimport { PermitOptions, SelfPermit } from './selfPermit'\nimport { encodeRouteToPath } from './utils'\nimport { MethodParameters, toHex } from './utils/calldata'\nimport { abi } from '@uniswap/v3-periphery/artifacts/contracts/SwapRouter.sol/SwapRouter.json'\nimport { Multicall } from './multicall'\nimport { FeeOptions, Payments } from './payments'\n\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent\n\n  /**\n   * The account that should receive the output.\n   */\n  recipient: string\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions\n\n  /**\n   * The optional price limit for the trade.\n   */\n  sqrtPriceLimitX96?: BigintIsh\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions\n}\n\n/**\n * Represents the Uniswap V3 SwapRouter, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades: Trade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>[],\n    options: SwapOptions\n  ): MethodParameters {\n    if (!Array.isArray(trades)) {\n      trades = [trades]\n    }\n\n    const sampleTrade = trades[0]\n    const tokenIn = sampleTrade.inputAmount.currency.wrapped\n    const tokenOut = sampleTrade.outputAmount.currency.wrapped\n\n    // All trades should have the same starting and ending token.\n    invariant(\n      trades.every(trade => trade.inputAmount.currency.wrapped.equals(tokenIn)),\n      'TOKEN_IN_DIFF'\n    )\n    invariant(\n      trades.every(trade => trade.outputAmount.currency.wrapped.equals(tokenOut)),\n      'TOKEN_OUT_DIFF'\n    )\n\n    const calldatas: string[] = []\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0)\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0)\n\n    const totalAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT\n    )\n\n    // flag for whether a refund needs to happen\n    const mustRefund = sampleTrade.inputAmount.currency.isNative && sampleTrade.tradeType === TradeType.EXACT_OUTPUT\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative\n    // flags for whether funds should be send first to the router\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative\n    const routerMustCustody = outputIsNative || !!options.fee\n\n    const totalValue: CurrencyAmount<Currency> = inputIsNative\n      ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN)\n      : ZERO_IN\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n    }\n\n    const recipient: string = validateAndParseAddress(options.recipient)\n    const deadline = toHex(options.deadline)\n\n    for (const trade of trades) {\n      for (const { route, inputAmount, outputAmount } of trade.swaps) {\n        const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n        const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\n\n        // flag for whether the trade is single hop or not\n        const singleHop = route.pools.length === 1\n\n        if (singleHop) {\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\n          } else {\n            const exactOutputSingleParams = {\n              tokenIn: route.tokenPath[0].address,\n              tokenOut: route.tokenPath[1].address,\n              fee: route.pools[0].fee,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn,\n              sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0)\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\n          }\n        } else {\n          invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n\n          const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n          if (trade.tradeType === TradeType.EXACT_INPUT) {\n            const exactInputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountIn,\n              amountOutMinimum: amountOut\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\n          } else {\n            const exactOutputParams = {\n              path,\n              recipient: routerMustCustody ? ADDRESS_ZERO : recipient,\n              deadline,\n              amountOut,\n              amountInMaximum: amountIn\n            }\n\n            calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\n          }\n        }\n      }\n    }\n\n    // unwrap\n    if (routerMustCustody) {\n      if (!!options.fee) {\n        if (outputIsNative) {\n          calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee))\n        } else {\n          calldatas.push(\n            Payments.encodeSweepToken(\n              sampleTrade.outputAmount.currency.wrapped,\n              totalAmountOut.quotient,\n              recipient,\n              options.fee\n            )\n          )\n        }\n      } else {\n        calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient))\n      }\n    }\n\n    // refund\n    if (mustRefund) {\n      calldatas.push(Payments.encodeRefundETH())\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(totalValue.quotient)\n    }\n  }\n}\n"],"names":["undefined","FACTORY_ADDRESS","ADDRESS_ZERO","POOL_INIT_CODE_HASH","FeeAmount","TICK_SPACINGS","LOWEST","LOW","MEDIUM","HIGH","NEGATIVE_ONE","JSBI","BigInt","ZERO","ONE","Q32","exponentiate","Q64","MaxUint32","subtract","U32Resolution","anchor","PublicKey","POOL_SEED","Buffer","from","u16ToSeed","num","arr","ArrayBuffer","view","DataView","setUint16","Uint8Array","i16ToSeed","setInt16","u32ToSeed","setUint32","i32ToSeed","setInt32","LOCAL_PROGRAM_ID","computePoolAddress","tokenA","tokenB","fee","sortsBefore","token0","token1","tk0","address","tk1","pda","findProgramAddress","toBuffer","then","poolState","toString","LiquidityMath","addDelta","x","y","lessThan","multiply","add","FullMath","mulDivRoundingUp","a","b","denominator","product","result","divide","notEqual","remainder","multiplyIn128","bitwiseAnd","MaxUint128","addIn128","sum","SqrtPriceMath","getAmount0Delta","sqrtRatioAX32","sqrtRatioBX32","liquidity","roundUp","greaterThan","numerator1","leftShift","numerator2","getAmount1Delta","getNextSqrtPriceFromInput","sqrtPX32","amountIn","zeroForOne","invariant","getNextSqrtPriceFromAmount0RoundingUp","getNextSqrtPriceFromAmount1RoundingDown","getNextSqrtPriceFromOutput","amountOut","amount","equal","greaterThanOrEqual","quotient","lessThanOrEqual","MAX_FEE","SwapMath","computeSwapStep","sqrtRatioCurrentX32","sqrtRatioTargetX32","amountRemaining","feePips","returnValues","exactIn","amountRemainingLessFee","sqrtRatioNextX32","max","feeAmount","TWO","POWERS_OF_2","map","pow","mostSignificantBit","msb","power","min","signedRightShift","mulShift","val","mulBy","TickMath","getSqrtRatioAtTick","tick","MIN_TICK","MAX_TICK","Number","isInteger","absTick","ratio","getTickAtSqrtRatio","sqrtRatioX32","MIN_SQRT_RATIO","MAX_SQRT_RATIO","sqrtRatioX64","r","log_2","i","f","bitwiseOr","log_sqrt10001","tickLow","toNumber","tickHigh","NoTickDataProvider","getTickAddress","Error","getTick","_tick","ERROR_MESSAGE","nextInitializedTickWithinOneWord","_lte","_tickSpacing","NO_TICK_DATA_PROVIDER_DEFAULT","Pool","tickCurrent","tickDataProvider","tickCurrentSqrtRatioX32","nextTickSqrtRatioX32","getAddress","initCodeHashManualOverride","factoryAddress","involvesToken","token","equals","priceOf","token0Price","token1Price","getOutputAmount","inputAmount","sqrtPriceLimitX32","currency","swap","outputAmount","amountCalculated","accounts","outputToken","CurrencyAmount","fromRawAmount","getInputAmount","sqrtPriceLimitX96","isToken","inputToken","amountSpecified","exactInput","console","log","state","amountSpecifiedRemaining","sqrtPriceX32","step","sqrtPriceStartX32","tickSpacing","nextInitTick","tickNext","initialized","wordPos","bitmapAddress","lastSavedWordPos","push","pubkey","isWritable","isSigner","sqrtPriceNextX32","liquidityNet","_token0Price","Price","_token1Price","chainId","maxLiquidityForAmount0Imprecise","amount0","intermediate","maxLiquidityForAmount1","amount1","maxLiquidityForAmounts","useFullPrecision","maxLiquidityForAmount0","liquidity0","liquidity1","encodeSqrtRatioX32","numerator","ratioX64","sqrt","tickToPrice","baseToken","quoteToken","priceToClosestTick","price","sorted","baseCurrency","quoteCurrency","sqrtRatioX96","nextTickPrice","Position","pool","tickLower","tickUpper","ratiosAfterSlippage","slippageTolerance","priceLower","asFraction","Percent","priceUpper","sqrtRatioX32Lower","sqrtRatioX32Upper","mintAmountsWithSlippage","poolLower","poolUpper","positionThatWillBeCreated","fromAmounts","mintAmounts","burnAmountsWithSlippage","fromAmount0","fromAmount1","_token0Amount","_token1Amount","_mintAmounts","Route","pools","input","output","length","allOnSameChain","every","wrappedInput","wrapped","tokenPath","entries","currentInputToken","nextToken","_midPrice","slice","reduce","nextInput","toHex","bigintIsh","bigInt","hex","encodeRouteToPath","route","exactOutput","firstInputToken","index","path","types","pack","reverse","isSorted","list","comparator","nearestUsableTick","rounded","Math","round","tickComparator","TickList","validateList","ticks","accumulator","isBelowSmallest","isAtOrAboveLargest","binarySearch","l","floor","nextInitializedTick","lte","compressed","minimum","maximum","BITMAP_SEED","POSITION_SEED","OBSERVATION_SEED","TICK_SEED","FEE_SEED","Tick","liquidityGross","tickPosition","tickBySpacing","bitPos","abs","tradeComparator","equalTo","aHops","swaps","total","cur","bHops","Trade","routes","tradeType","inputCurrency","outputCurrency","numPools","poolAddressSet","Set","size","fromRoute","TradeType","EXACT_INPUT","exactOut","EXACT_OUTPUT","amounts","Array","fromFractionalAmount","fromRoutes","populatedRoutes","createUncheckedTrade","constructorArguments","createUncheckedTradeWithMultipleRoutes","minimumAmountOut","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","worstExecutionPrice","bestTradeExactIn","currencyAmountIn","currencyOut","currentPools","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","sortedInsert","poolsExcludingThisPool","concat","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","_inputAmount","totalInputFromRoutes","_outputAmount","totalOutputFromRoutes","_executionPrice","_priceImpact","spotOutputAmount","midPrice","quote","priceImpact","generateBitmapWord","shln","bitLength","lsb","zeroBits","nextInitializedBit","word","mask","BN","subn","masked","and","eqn","next","notn","Multicall","encodeMulticall","calldatas","isArray","INTERFACE","encodeFunctionData","Interface","abi","isAllowedPermit","permitOptions","SelfPermit","encodePermit","options","nonce","expiry","v","s","deadline","Payments","encodeFeeBips","encodeUnwrapWETH9","amountMinimum","recipient","feeOptions","validateAndParseAddress","feeBips","feeRecipient","encodeSweepToken","encodeRefundETH","isMint","Object","keys","some","k","NonfungiblePositionManager","encodeCreate","createCallParameters","calldata","value","addCallParameters","position","amount0Desired","amount1Desired","minimumAmounts","amount0Min","amount1Min","createPool","token0Permit","token1Permit","tokenId","useNative","wrappedValue","encodeCollect","involvesETH","expectedCurrencyOwed0","isNative","expectedCurrencyOwed1","amount0Max","amount1Max","ethAmount","tokenAmount","collectCallParameters","removeCallParameters","partialPosition","liquidityPercentage","permit","spender","collectOptions","rest","burnToken","safeTransferFromParameters","sender","data","SwapQuoter","quoteCallParameters","singleHop","quoteAmount","Staker","encodeClaim","incentiveKey","_encodeIncentiveKey","rewardToken","collectRewards","incentiveKeys","withdrawToken","withdrawOptions","claimOptions","owner","encodeDeposit","defaultAbiCoder","encode","INCENTIVE_KEY_ABI","refundee","startTime","endTime","SwapRouter","swapCallParameters","trades","sampleTrade","trade","ZERO_IN","ZERO_OUT","totalAmountOut","mustRefund","inputIsNative","outputIsNative","routerMustCustody","totalValue","inputTokenPermit","exactInputSingleParams","amountOutMinimum","exactOutputSingleParams","amountInMaximum","exactInputParams","exactOutputParams"],"mappings":"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"}